const categoriesPath = path.join(__dirname, '../src/data/categories.json');

// Crear nueva página de categoría
app.post('/create-category-page', (req, res) => {
    const { category } = req.body;
    if (!category || typeof category !== 'string') {
        return res.status(400).send('El nombre de la categoría no es válido');
    }

    const categoryCapitalized = capitalize(category);
    const pagePath = path.join(__dirname, `../src/pages/${categoryCapitalized}Page.jsx`);
    const appJsxPath = path.join(__dirname, '../src/App.jsx');

    const pageContent = `
        import React from 'react';
        import { useEffect, useState } from 'react';
        import '../styles/categorias.css';

        const ${categoryCapitalized}Page = () => {
            const [products, setProducts] = useState([]);

            useEffect(() => {
                const storedCategories = JSON.parse(localStorage.getItem('categories')) || [];
                const category = storedCategories.find(cat => cat.name === '${categoryCapitalized}');
                setProducts(category ? category.products : []);
            }, []);

            return (
                <div>
                    <h1>${categoryCapitalized}</h1>
                    <table>
                        <thead>
                            <tr>
                                <th>Item</th>
                                <th>Precio</th>
                                <th>Cantidad</th>
                            </tr>
                        </thead>
                        <tbody>
                            {products.map((product, index) => (
                                <tr key={index}>
                                    <td>{product.name}</td>
                                    <td>${parseFloat(product.price).toLocaleString()}</td>
                                    <td>{product.quantity}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            );
        };

        export default ${categoryCapitalized}Page;
    `;

    // Crear la página JSX
    fs.writeFile(pagePath, pageContent.trim(), (err) => {
        if (err) {
            console.error('Error al crear la página:', err);
            return res.status(500).send('Error al crear la página');
        }

        // Actualizar categories.json
        fs.readFile(categoriesPath, 'utf8', (err, data) => {
            if (err) {
                console.error('Error al leer categories.json:', err);
                return res.status(500).send('Error al leer categories.json');
            }

            let categories = JSON.parse(data);
            categories.push(categoryCapitalized);

            fs.writeFile(categoriesPath, JSON.stringify(categories, null, 2), (err) => {
                if (err) {
                    console.error('Error al actualizar categories.json:', err);
                    return res.status(500).send('Error al actualizar categories.json');
                }

                res.send(`Página de la categoría ${categoryCapitalized} creada e importada en App.jsx`);
            });
        });
    });
});

// Eliminar una página de categoría
app.delete('/delete-category-page', (req, res) => {
    const { category } = req.body;
    if (!category || typeof category !== 'string') {
        return res.status(400).send('El nombre de la categoría no es válido');
    }

    const categoryCapitalized = capitalize(category);
    const pagePath = path.join(__dirname, `../src/pages/${categoryCapitalized}Page.jsx`);

    // Eliminar el archivo JSX
    fs.unlink(pagePath, (err) => {
        if (err) {
            console.error('Error al eliminar la página:', err);
            return res.status(500).send('Error al eliminar la página');
        }

        // Actualizar categories.json
        fs.readFile(categoriesPath, 'utf8', (err, data) => {
            if (err) {
                console.error('Error al leer categories.json:', err);
                return res.status(500).send('Error al leer categories.json');
            }

            let categories = JSON.parse(data);
            categories = categories.filter(cat => cat !== categoryCapitalized);

            fs.writeFile(categoriesPath, JSON.stringify(categories, null, 2), (err) => {
                if (err) {
                    console.error('Error al actualizar categories.json:', err);
                    return res.status(500).send('Error al actualizar categories.json');
                }

                res.send(`Página de la categoría ${categoryCapitalized} eliminada y eliminada de App.jsx`);
            });
        });
    });
});
